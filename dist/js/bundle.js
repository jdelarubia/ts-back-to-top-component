(function () {
    'use strict';

    /**
     * back-to-top.ts
     * <back-to-top> button component.
     */
    document.addEventListener('scroll', (ev) => {
        let showing = window.scrollY > window.innerHeight ? true : false;
        const ToggleEvent = new CustomEvent('toggleButton', {
            detail: { showing: showing },
        });
        document.dispatchEvent(ToggleEvent);
    });
    const buttonCss = `<style>@import "./css/back-to-top.css";</style>`;
    const template = document.createElement('template');
    template.innerHTML = buttonCss + `<a href="#top" class="back-to-top"></a>`;
    class BackToTop extends HTMLElement {
        shadow;
        targetId;
        constructor(targetId = 'top') {
            super();
            this.shadow = this.attachShadow({ mode: 'open' });
            this.targetId = `#${targetId}`;
        } //.
        connectedCallback() {
            this.shadow.appendChild(template.content.cloneNode(true));
            const a = this.shadow.querySelector('a');
            a.href = this.targetId;
            document.addEventListener('toggleButton', (ev) => {
                a.classList.toggle('show', ev.detail.showing);
            });
        }
    } //. BackToTop
    window.customElements.define('back-to-top', BackToTop);

    /**
     * fancy-text-block.ts
     * <fancy-text-block> paragraph component.
     */
    class FancyTextBlock extends HTMLElement {
        // private shadow: ShadowRoot
        currentColorIndex = 0;
        availableColors = ['red', 'blue', 'green', 'yellow', 'black'];
        constructor() {
            super();
        }
        connectedCallback() {
            this.addEventListener('click', (event) => {
                const currentColor = this.availableColors[this.currentColorIndex];
                console.log(`text block color is now ${currentColor}`);
                this.style.color = this.availableColors[this.currentColorIndex];
                this.currentColorIndex++;
                if (this.currentColorIndex == this.availableColors.length) {
                    this.currentColorIndex = 0;
                }
            });
        }
    } //. FancyTextBlock
    window.customElements.define('fancy-text-block', FancyTextBlock);

    new BackToTop();
    new FancyTextBlock();

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvYmFjay10by10b3AuanMiLCIuLi8uLi9zcmMvanMvZmFuY3ktdGV4dC1ibG9jay5qcyIsIi4uLy4uL3NyYy9qcy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYmFjay10by10b3AudHNcbiAqIDxiYWNrLXRvLXRvcD4gYnV0dG9uIGNvbXBvbmVudC5cbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKGV2KSA9PiB7XG4gICAgbGV0IHNob3dpbmcgPSB3aW5kb3cuc2Nyb2xsWSA+IHdpbmRvdy5pbm5lckhlaWdodCA/IHRydWUgOiBmYWxzZTtcbiAgICBjb25zdCBUb2dnbGVFdmVudCA9IG5ldyBDdXN0b21FdmVudCgndG9nZ2xlQnV0dG9uJywge1xuICAgICAgICBkZXRhaWw6IHsgc2hvd2luZzogc2hvd2luZyB9LFxuICAgIH0pO1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoVG9nZ2xlRXZlbnQpO1xufSk7XG5jb25zdCBidXR0b25Dc3MgPSBgPHN0eWxlPkBpbXBvcnQgXCIuL2Nzcy9iYWNrLXRvLXRvcC5jc3NcIjs8L3N0eWxlPmA7XG5jb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG50ZW1wbGF0ZS5pbm5lckhUTUwgPSBidXR0b25Dc3MgKyBgPGEgaHJlZj1cIiN0b3BcIiBjbGFzcz1cImJhY2stdG8tdG9wXCI+PC9hPmA7XG5jbGFzcyBCYWNrVG9Ub3AgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgc2hhZG93O1xuICAgIHRhcmdldElkO1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldElkID0gJ3RvcCcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zaGFkb3cgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IGAjJHt0YXJnZXRJZH1gO1xuICAgIH0gLy8uXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuc2hhZG93LmFwcGVuZENoaWxkKHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgICAgY29uc3QgYSA9IHRoaXMuc2hhZG93LnF1ZXJ5U2VsZWN0b3IoJ2EnKTtcbiAgICAgICAgYS5ocmVmID0gdGhpcy50YXJnZXRJZDtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG9nZ2xlQnV0dG9uJywgKGV2KSA9PiB7XG4gICAgICAgICAgICBhLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnLCBldi5kZXRhaWwuc2hvd2luZyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0gLy8uIEJhY2tUb1RvcFxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYmFjay10by10b3AnLCBCYWNrVG9Ub3ApO1xuZXhwb3J0IHsgQmFja1RvVG9wIH07XG4iLCIvKipcbiAqIGZhbmN5LXRleHQtYmxvY2sudHNcbiAqIDxmYW5jeS10ZXh0LWJsb2NrPiBwYXJhZ3JhcGggY29tcG9uZW50LlxuICovXG5jbGFzcyBGYW5jeVRleHRCbG9jayBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICAvLyBwcml2YXRlIHNoYWRvdzogU2hhZG93Um9vdFxuICAgIGN1cnJlbnRDb2xvckluZGV4ID0gMDtcbiAgICBhdmFpbGFibGVDb2xvcnMgPSBbJ3JlZCcsICdibHVlJywgJ2dyZWVuJywgJ3llbGxvdycsICdibGFjayddO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbG9yID0gdGhpcy5hdmFpbGFibGVDb2xvcnNbdGhpcy5jdXJyZW50Q29sb3JJbmRleF07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgdGV4dCBibG9jayBjb2xvciBpcyBub3cgJHtjdXJyZW50Q29sb3J9YCk7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLmNvbG9yID0gdGhpcy5hdmFpbGFibGVDb2xvcnNbdGhpcy5jdXJyZW50Q29sb3JJbmRleF07XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDb2xvckluZGV4Kys7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29sb3JJbmRleCA9PSB0aGlzLmF2YWlsYWJsZUNvbG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDb2xvckluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSAvLy4gRmFuY3lUZXh0QmxvY2tcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2ZhbmN5LXRleHQtYmxvY2snLCBGYW5jeVRleHRCbG9jayk7XG5leHBvcnQgeyBGYW5jeVRleHRCbG9jayB9O1xuIiwiaW1wb3J0IHsgQmFja1RvVG9wIH0gZnJvbSAnLi9iYWNrLXRvLXRvcCc7XG5pbXBvcnQgeyBGYW5jeVRleHRCbG9jayB9IGZyb20gJy4vZmFuY3ktdGV4dC1ibG9jayc7XG5uZXcgQmFja1RvVG9wKCk7XG5uZXcgRmFuY3lUZXh0QmxvY2soKTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFBQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUs7SUFDNUMsSUFBSSxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUNyRSxJQUFJLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLGNBQWMsRUFBRTtJQUN4RCxRQUFRLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUU7SUFDcEMsS0FB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
